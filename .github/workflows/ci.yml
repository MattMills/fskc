name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check build
        run: cargo check --verbose
        
      - name: Build all targets
        run: cargo build --all-targets --verbose

  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Create test script
        run: |
          cat > run-tests.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Function to run a test and save output
          run_test() {
            local name=$1
            local cmd=$2
            echo "Running $name..."
            mkdir -p test-results
            if $cmd > "test-results/$name.txt" 2>&1; then
              echo "✓ $name passed"
              echo "success" > "test-results/$name.status"
            else
              echo "✗ $name failed"
              echo "failure" > "test-results/$name.status"
              cat "test-results/$name.txt"
              return 1
            fi
          }
          
          FAILED=0
          
          # Run library tests
          if ! run_test "lib_tests" "cargo test --lib --verbose"; then
            FAILED=1
          fi
          
          # Run integration tests
          if ! run_test "integration_tests" "cargo test --test integration_tests --verbose"; then
            FAILED=1
          fi
          
          # Run doc tests
          if ! run_test "doc_tests" "cargo test --doc --verbose"; then
            FAILED=1
          fi
          
          # Run any other test targets
          for test_file in tests/*.rs; do
            if [ -f "$test_file" ] && [ "$(basename "$test_file")" != "integration_tests.rs" ]; then
              test_name=$(basename "$test_file" .rs)
              if ! run_test "$test_name" "cargo test --test $test_name --verbose"; then
                FAILED=1
              fi
            fi
          done
          
          exit $FAILED
          EOF
          chmod +x run-tests.sh
      
      - name: Run tests
        run: ./run-tests.sh
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

  examples:
    name: Run Examples
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Create examples script
        run: |
          cat > run-examples.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Function to run an example and save output
          run_example() {
            local name=$1
            echo "Running example: $name"
            mkdir -p example-results
            
            # First try to build the example
            echo "Building example $name..."
            if ! cargo build --example "$name" > "example-results/${name}_build.txt" 2>&1; then
              echo "✗ Example $name failed to build"
              echo "failure" > "example-results/$name.status"
              echo "Build log:"
              cat "example-results/${name}_build.txt"
              return 1
            fi
            
            # Then try to run it
            echo "Running example $name..."
            if cargo run --example "$name" > "example-results/${name}_run.txt" 2>&1; then
              echo "✓ Example $name succeeded"
              echo "success" > "example-results/$name.status"
              return 0
            else
              echo "✗ Example $name failed during execution"
              echo "failure" > "example-results/$name.status"
              echo "Run log:"
              cat "example-results/${name}_run.txt"
              return 1
            fi
          }
          
          # Get list of all examples
          echo "Discovering examples..."
          examples=()
          while IFS= read -r file; do
            examples+=("$(basename "$file" .rs)")
          done < <(find examples -name "*.rs" -type f)
          
          total=${#examples[@]}
          passed=0
          failed=0
          failed_examples=()
          
          echo "Found $total examples to run"
          echo "=========================="
          
          # Run each example
          for name in "${examples[@]}"; do
            if run_example "$name"; then
              ((passed++))
            else
              ((failed++))
              failed_examples+=("$name")
            fi
            echo "------------------------"
          done
          
          # Print summary
          echo "=========================="
          echo "SUMMARY:"
          echo "Total: $total"
          echo "Passed: $passed"
          echo "Failed: $failed"
          
          if [ $failed -gt 0 ]; then
            echo "Failed examples:"
            for name in "${failed_examples[@]}"; do
              echo "- $name"
            done
            exit 1
          fi
          
          echo "All examples passed!"
          exit 0
          EOF
          chmod +x run-examples.sh
      
      - name: Run examples
        run: ./run-examples.sh
      
      - name: Upload example results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: example-results
          path: example-results/
